{"version":3,"sources":["Path_visualizer/Node/Node.jsx","Algorithms/breadthFirstSearch.js","Algorithms/dijkstra.js","Algorithms/dfs.js","Algorithms/astar.js","Algorithms/greedyBestFirstSearch.js","Algorithms/randomWalk.js","Path_visualizer/Path_visualizer.jsx","images/logo.svg","Path_visualizer/ui.js","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","breadthFirstSearch","grid","startNode","finishNode","visitedNodesInOrder","queue","length","closestNode","shift","isVisited","push","nextNode","previousNode","dijkstra","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","dfs","stack","pop","astar","a","b","totalDistance","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","unshift","heuristic","Math","abs","greedyBFS","randomWalk","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","getRandomNeighbour","nodesVisited","numNodesVisited","neighboursFilteredStartAndWall","neighboursFilteredVisited","floor","random","count","Path_visualizer","animateRandomWalk","i","setTimeout","setState","visualizingAlgorithm","state","speed","document","getElementById","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","animateShortestPath","algo","currentNode","getNodesInShortestPathOrder","animateAlgo","CssBaseline","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","useStyles","makeStyles","logo","width","height","StyledMenu","styled","Menu","elevation","anchorOrigin","vertical","horizontal","transformOrigin","borderRadius","minWidth","boxShadow","padding","fontSize","marginRight","theme","spacing","Navbar","classes","useState","anchorEl","setAnchorEl","anchorE2","setAnchorE2","anchorE3","setAnchorE3","open","Boolean","open2","open3","handleClose","handleClose2","handleClose3","AppBar","position","style","backgroundColor","Toolbar","IconButton","edge","src","alt","Typography","variant","component","sx","flexGrow","Button","undefined","disableElevation","onClick","event","currentTarget","color","textTransform","endIcon","MenuListProps","onClose","MenuItem","Divider","my","ml","btn","borderColor","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.62d61b3b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// main breadthfirstsearch function\r\nexport function breadthFirstSearch(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const queue = [startNode];\r\n  while (!!queue.length) {\r\n    const closestNode = queue.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    if (\r\n      !closestNode.isWall &&\r\n      (closestNode.isStart || !closestNode.isVisited)\r\n    ) {\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      const { col, row } = closestNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          queue.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          queue.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          queue.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          queue.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while(currentNode !== null){\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// main dijkstra's function \r\nexport function dijkstra(grid, startNode, finishNode){\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while(!!unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        if(closestNode.isWall) continue;\r\n        if(closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if(closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n// get all nodes of grid\r\nfunction getAllNodes(grid){\r\n    const nodes = [];\r\n    for(const row of grid){\r\n        for(const node of row){\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n// sort the nodes by distance\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n// update unvisited neighbors\r\nfunction updateUnvisitedNeighbors(node, grid){\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for(const neighbor of unvisitedNeighbors){\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n// Find unvisited neighbor node\r\nfunction getUnvisitedNeighbors(node, grid){\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if(row > 0) neighbors.push(grid[row - 1][col]);\r\n    if(row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if(col > 0) neighbors.push(grid[row][col - 1]);\r\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Find Shortest Path After the Dijkstra Function run using backtracking \r\nexport function getNodesInShortestPathOrder(finishNode){\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while(currentNode !== null){\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","// main dfs function\r\nexport function dfs(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  while (stack.length) {\r\n    const closestNode = stack.pop();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    if (\r\n      !closestNode.isWall &&\r\n      (closestNode.isStart || !closestNode.isVisited)\r\n    ) {\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      const { col, row } = closestNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          stack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          stack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          stack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = closestNode;\r\n          stack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = g(n) + h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + heuristic(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + heuristic(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction heuristic(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\n\r\n","export function greedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = heuristic(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = heuristic(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction heuristic(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n","export function randomWalk(grid, startNode, finishNode) {\r\n  // if (!startNode || !finishNode || startNode === finishNode) {\r\n  //   return false;\r\n  // }\r\n  let visitedNodesInOrder = [];\r\n  let closestNode = startNode;\r\n  let maxNodes = grid.length * grid[0].length;\r\n  let maxNodesVisitedTracker = 0;\r\n  let loopTracker = 0;\r\n  while (true) {\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\r\n    let nodesVisited = numNodesVisited(grid);\r\n    if (nodesVisited === maxNodes - 2) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nodesVisited > maxNodesVisitedTracker) {\r\n      maxNodesVisitedTracker = nodesVisited;\r\n      loopTracker = 0;\r\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\r\n      loopTracker += 1;\r\n      if (loopTracker > 1000) {\r\n        return visitedNodesInOrder;\r\n      }\r\n    }\r\n    randomNeighbour.previousNode = closestNode;\r\n    closestNode = randomNeighbour;\r\n  }\r\n}\r\n\r\nfunction getRandomNeighbour(node, grid, finishNode) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  let neighboursFilteredStartAndWall = neighbours.filter(\r\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\r\n  );\r\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\r\n    (neighbour) => !neighbour.isVisited\r\n  );\r\n  if (neighboursFilteredVisited.length > 0) {\r\n    return neighboursFilteredVisited[\r\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\r\n    ];\r\n  }\r\n  return neighboursFilteredStartAndWall[\r\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\r\n  ];\r\n}\r\n\r\nfunction numNodesVisited(grid) {\r\n  let count = 0;\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      if (node.isVisited || node.isWall) count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrder,\r\n} from \"../Algorithms/breadthFirstSearch\";\r\nimport { dijkstra } from \"../Algorithms/dijkstra\";\r\nimport { dfs } from \"../Algorithms/dfs\";\r\nimport { astar } from \"../Algorithms/astar\";\r\nimport { greedyBFS } from \"../Algorithms/greedyBestFirstSearch\";\r\nimport { randomWalk } from \"../Algorithms/randomWalk\";\r\nimport \"./Path_visualizer.css\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n// import UI from \"./ui\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class Path_visualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    // console.log(\"Mouse Down\");\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n    // console.log(\"Mouse Enter\");\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n    // console.log(\"Mouse Up\");\r\n  }\r\n\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 25 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 25 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 25 * i);\r\n    }\r\n  }\r\n\r\n  animateRandomWalk = (visitedNodesInOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ visualizingAlgorithm: false });\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          //finish node\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-finish-reached\";\r\n        }, i * 25);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * 25);\r\n    }\r\n  };\r\n\r\n  visualize(algo) {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = \"\";\r\n\r\n    if (algo === dijkstra)\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    else if (algo === breadthFirstSearch)\r\n      visitedNodesInOrder = breadthFirstSearch(grid, startNode, finishNode);\r\n    else if (algo === dfs)\r\n      visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n    else if (algo === astar)\r\n      visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    else if (algo === greedyBFS)\r\n      visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n    else if (algo === randomWalk)\r\n      visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\r\n\r\n    if (algo === randomWalk) {\r\n      this.animateRandomWalk(visitedNodesInOrder);\r\n    } else {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        {/* <UI /> */}\r\n        {/* <button onClick={() => this.visualize(dijkstra)}>Dijkstra</button>\r\n        <button onClick={() => this.visualize(breadthFirstSearch)}>\r\n          Breadth First Search\r\n        </button>\r\n        <button onClick={() => this.visualize(dfs)}>Depth First Search</button>\r\n        <button onClick={() => this.visualize(astar)}>A *</button>\r\n        <button onClick={() => this.visualize(greedyBFS)}>\r\n          Greedy Best First Search\r\n        </button>\r\n        <button onClick={() => this.visualize(randomWalk)}>Random Walk</button> */}\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"rowid\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      row={row}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 24; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 62; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.ab9bbf88.svg\";","// import { Icon } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  Divider,\r\n  CssBaseline,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport KeyboardArrowDown from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { styled } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nimport logo from \"../images/logo.svg\";\r\n\r\nconst useStyles = makeStyles({\r\n  logo: {\r\n    width: \"10rem\",\r\n    height: \"auto\",\r\n  },\r\n});\r\n\r\nconst StyledMenu = styled((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    anchorOrigin={{\r\n      vertical: \"bottom\",\r\n      horizontal: \"right\",\r\n    }}\r\n    transformOrigin={{\r\n      vertical: \"top\",\r\n      horizontal: \"right\",\r\n    }}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  \"& .MuiPaper-root\": {\r\n    borderRadius: 6,\r\n    minWidth: 180,\r\n    boxShadow:\r\n      \"rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\",\r\n    \"& .MuiMenu-list\": {\r\n      padding: \"4px 0\",\r\n    },\r\n    \"& .MuiMenuItem-root\": {\r\n      \"& .MuiSvgIcon-root\": {\r\n        fontSize: 18,\r\n        marginRight: theme.spacing(1.5),\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Navbar() {\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [anchorE2, setAnchorE2] = useState(null);\r\n  const [anchorE3, setAnchorE3] = useState(null);\r\n\r\n  const open = Boolean(anchorEl);\r\n  const open2 = Boolean(anchorE2);\r\n  const open3 = Boolean(anchorE3);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClick2 = (event) => {\r\n    setAnchorE2(event.currentTarget);\r\n  };\r\n  const handleClick3 = (event) => {\r\n    setAnchorE3(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleClose2 = () => {\r\n    setAnchorE2(null);\r\n  };\r\n  const handleClose3 = () => {\r\n    setAnchorE3(null);\r\n  };\r\n\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" style={{ backgroundColor: \"#050A30\" }}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" aria-label=\"app\">\r\n            <img\r\n              src={logo}\r\n              alt=\"logo\"\r\n              style={{ width: \"12rem\", height: \"auto\" }}\r\n            />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1 }}\r\n          ></Typography>\r\n          <Button\r\n            // sx={{ flexGrow: 1 }}\r\n            id=\"demo-customized-button\"\r\n            aria-controls=\"demo-customized-menu\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded={open ? \"true\" : undefined}\r\n            variant=\"contained\"\r\n            disableElevation\r\n            onClick={handleClick}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              color: \"#050A30\",\r\n              fontSize: \"16px\",\r\n              textTransform: \"none\",\r\n            }}\r\n            endIcon={<KeyboardArrowDown />}\r\n          >\r\n            Algorithm\r\n          </Button>\r\n          <StyledMenu\r\n            id=\"demo-customized-menu\"\r\n            MenuListProps={{\r\n              \"aria-labelledby\": \"demo-customized-button\",\r\n            }}\r\n            anchorEl={anchorEl}\r\n            open={open}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem onClick={handleClose}>Dijkstra</MenuItem>\r\n            <MenuItem onClick={handleClose}>Breadth First Search</MenuItem>\r\n\r\n            <MenuItem onClick={handleClose}>Depth First Search</MenuItem>\r\n            <Divider sx={{ my: 0.5 }} />\r\n            <MenuItem onClick={handleClose}>A *</MenuItem>\r\n            <MenuItem onClick={handleClose}>Greedy Best First Search</MenuItem>\r\n            <MenuItem onClick={handleClose}>Random Walk</MenuItem>\r\n          </StyledMenu>\r\n\r\n          <Button\r\n            sx={{ ml: 2 }}\r\n            id=\"demo-customized-button-2\"\r\n            aria-controls=\"demo-customized-menu-2\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded={open2 ? \"true\" : undefined}\r\n            variant=\"contained\"\r\n            disableElevation\r\n            onClick={handleClick2}\r\n            className={classes.btn}\r\n            style={{ backgroundColor: \"blue\", color: \"white\" }}\r\n            endIcon={<KeyboardArrowDown />}\r\n          >\r\n            Maze\r\n          </Button>\r\n          <StyledMenu\r\n            id=\"demo-customized-menu-2\"\r\n            MenuListProps={{\r\n              \"aria-labelledby\": \"demo-customized-button-2\",\r\n            }}\r\n            anchorEl={anchorE2}\r\n            open={open2}\r\n            onClose={handleClose2}\r\n          >\r\n            <MenuItem onClick={handleClose2}>Random Maze</MenuItem>\r\n            <MenuItem onClick={handleClose2}>Recursive Division Maze</MenuItem>\r\n\r\n            <MenuItem onClick={handleClose2}>Vertical Division Maze</MenuItem>\r\n            <MenuItem onClick={handleClose2}>Horizontal Division Maze</MenuItem>\r\n          </StyledMenu>\r\n\r\n          <Button\r\n            sx={{ ml: 2 }}\r\n            id=\"demo-customized-button-3\"\r\n            aria-controls=\"demo-customized-menu-3\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded={open3 ? \"true\" : undefined}\r\n            variant=\"contained\"\r\n            disableElevation\r\n            onClick={handleClick3}\r\n            className={classes.btn}\r\n            style={{ backgroundColor: \"orange\", color: \"white\" }}\r\n            endIcon={<KeyboardArrowDown />}\r\n          >\r\n            Speed\r\n          </Button>\r\n          <StyledMenu\r\n            id=\"demo-customized-menu-3\"\r\n            MenuListProps={{\r\n              \"aria-labelledby\": \"demo-customized-button-3\",\r\n            }}\r\n            anchorEl={anchorE3}\r\n            open={open3}\r\n            onClose={handleClose3}\r\n          >\r\n            <MenuItem onClick={handleClose3}>Slow</MenuItem>\r\n            <MenuItem onClick={handleClose3}>Medium</MenuItem>\r\n            <MenuItem onClick={handleClose3}>Fast</MenuItem>\r\n          </StyledMenu>\r\n\r\n          <Typography\r\n            variant=\"h6\"\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1 }}\r\n          ></Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            sx={{ ml: 2 }}\r\n            style={{ borderColor: \"lightgreen\", color: \"lightgreen\" }}\r\n          >\r\n            Visualize Algorithm\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{ ml: 2 }}\r\n            style={{ backgroundColor: \"green\" }}\r\n          >\r\n            Generate Maze\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{ ml: 2 }}\r\n            style={{ backgroundColor: \"darkred\" }}\r\n          >\r\n            Clear Grid\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Path_visualizer from \"./Path_visualizer/Path_visualizer\";\r\nimport Navbar from \"./Path_visualizer/ui\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Path_visualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}